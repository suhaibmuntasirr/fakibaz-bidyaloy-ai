
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Users, Clock, BookOpen, Plus, UserPlus, MessageCircle, Calendar, Video, ExternalLink } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

const StudyGroups = () => {
  const [joinedGroups, setJoinedGroups] = useState<number[]>([]);
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [newGroupName, setNewGroupName] = useState('');
  const [newGroupSubject, setNewGroupSubject] = useState('');
  const [studyGroups, setStudyGroups] = useState([
    {
      id: 1,
      name: 'HSC Physics Study Circle',
      subject: '‡¶™‡¶¶‡¶æ‡¶∞‡ßç‡¶•‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®',
      class: 'Class 12',
      members: 45,
      maxMembers: 50,
      nextSession: '‡ß® ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶™‡¶∞‡ßá',
      description: '‡¶®‡¶ø‡¶â‡¶ü‡¶®‡ßá‡¶∞ ‡¶∏‡ßÇ‡¶§‡ßç‡¶∞ ‡¶ì ‡¶ó‡¶§‡¶ø‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ',
      isLive: false
    },
    {
      id: 2,
      name: 'Math Problem Solvers',
      subject: '‡¶ó‡¶£‡¶ø‡¶§',
      class: 'Class 11',
      members: 32,
      maxMembers: 40,
      nextSession: '‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤ ‡ßÆ PM',
      description: '‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡¶æ‡¶∏ ‡¶ì ‡¶∏‡¶Æ‡¶æ‡¶ï‡¶≤‡¶® ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®',
      isLive: true
    },
    {
      id: 3,
      name: 'Chemistry Lab Discussion',
      subject: '‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶®',
      class: 'Class 10',
      members: 28,
      maxMembers: 35,
      nextSession: '‡¶∞‡¶¨‡¶ø‡¶¨‡¶æ‡¶∞ ‡ß¨ PM',
      description: '‡¶ú‡ßà‡¶¨ ‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶® ‡¶ì ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ',
      isLive: false
    }
  ]);
  const { toast } = useToast();

  const handleJoinGroup = (groupId: number) => {
    const group = studyGroups.find(g => g.id === groupId);
    if (!group) return;

    if (joinedGroups.includes(groupId)) {
      setJoinedGroups(joinedGroups.filter(id => id !== groupId));
      setStudyGroups(prev => prev.map(g => 
        g.id === groupId ? { ...g, members: g.members - 1 } : g
      ));
      toast({
        title: "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
        description: `‡¶Ü‡¶™‡¶®‡¶ø "${group.name}" ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®`,
      });
    } else {
      if (group.members >= group.maxMembers) {
        toast({
          title: "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≠‡¶∞‡ßç‡¶§‡¶ø",
          description: "‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ü‡¶∞ ‡¶ú‡¶æ‡¶Ø‡¶º‡¶ó‡¶æ ‡¶®‡ßá‡¶á",
          variant: "destructive"
        });
        return;
      }
      setJoinedGroups([...joinedGroups, groupId]);
      setStudyGroups(prev => prev.map(g => 
        g.id === groupId ? { ...g, members: g.members + 1 } : g
      ));
      toast({
        title: "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡ßã‡¶ó‡¶¶‡¶æ‡¶® ‡¶∏‡¶´‡¶≤!",
        description: `‡¶Ü‡¶™‡¶®‡¶ø "${group.name}" ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®`,
      });
    }
  };

  const handleJoinMeeting = (group: any) => {
    if (!joinedGroups.includes(group.id)) {
      toast({
        title: "‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂‡¶æ‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á",
        description: "‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç ‡¶è ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶®",
        variant: "destructive"
      });
      return;
    }
    window.open('https://meet.google.com', '_blank');
    toast({
      title: "Google Meet ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá",
      description: `"${group.name}" ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Google Meet ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá`,
    });
  };

  const openGoogleMeet = () => {
    window.open('https://meet.google.com', '_blank');
    toast({
      title: "Google Meet ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá",
      description: "‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá Google Meet ‡¶è ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡¶®",
    });
  };

  const handleCreateGroup = () => {
    if (newGroupName.trim() && newGroupSubject.trim()) {
      const newGroup = {
        id: studyGroups.length + 1,
        name: newGroupName,
        subject: newGroupSubject,
        class: 'Class 11',
        members: 1,
        maxMembers: 30,
        nextSession: '‡¶Ü‡¶ú ‡¶∞‡¶æ‡¶§ ‡ßØ PM',
        description: '‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡ßç‡¶ü‡¶æ‡¶°‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™',
        isLive: false
      };
      setStudyGroups([...studyGroups, newGroup]);
      setJoinedGroups([...joinedGroups, newGroup.id]);
      setNewGroupName('');
      setNewGroupSubject('');
      setShowCreateDialog(false);
      toast({
        title: "‡¶®‡¶§‡ßÅ‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
        description: `"${newGroupName}" ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`,
      });
    }
  };

  return (
    <Card className="bg-black/20 backdrop-blur-lg border border-white/10">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-white flex items-center">
            <Users className="mr-2 h-5 w-5 text-blue-400" />
            ‡¶∏‡ßç‡¶ü‡¶æ‡¶°‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™
          </CardTitle>
          <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>
            <DialogTrigger asChild>
              <Button 
                size="sm"
                className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
              >
                <Plus className="mr-1 h-3 w-3" />
                ‡¶®‡¶§‡ßÅ‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™
              </Button>
            </DialogTrigger>
            <DialogContent className="bg-[#28282B] border-white/20 text-white">
              <DialogHeader>
                <DialogTitle className="text-white">‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡ßç‡¶ü‡¶æ‡¶°‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <Input
                  placeholder="‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ"
                  value={newGroupName}
                  onChange={(e) => setNewGroupName(e.target.value)}
                  className="bg-black/30 border-white/20 text-white placeholder:text-gray-400"
                />
                <Input
                  placeholder="‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º"
                  value={newGroupSubject}
                  onChange={(e) => setNewGroupSubject(e.target.value)}
                  className="bg-black/30 border-white/20 text-white placeholder:text-gray-400"
                />
                <div className="space-y-2">
                  <Button 
                    onClick={openGoogleMeet}
                    variant="outline"
                    className="w-full bg-black/30 border-white/20 text-white hover:bg-white/10"
                  >
                    <Video className="mr-2 h-4 w-4" />
                    Meet ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
                  </Button>
                </div>
                <Button 
                  onClick={handleCreateGroup}
                  className="w-full bg-gradient-to-r from-green-600 to-teal-600 hover:from-green-700 hover:to-teal-700"
                >
                  ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        {studyGroups.map((group) => (
          <div
            key={group.id}
            className="p-4 bg-black/30 rounded-lg border border-white/10 hover:border-white/20 transition-all"
          >
            <div className="flex items-start justify-between mb-3">
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <h3 className="text-white font-medium">{group.name}</h3>
                  {group.isLive && (
                    <Badge className="bg-red-600/20 text-red-300 border-red-600/30 text-xs">
                      üî¥ ‡¶≤‡¶æ‡¶á‡¶≠
                    </Badge>
                  )}
                </div>
                <p className="text-gray-400 text-sm mb-2">{group.description}</p>
              </div>
              <div className="flex flex-col gap-2">
                <Button
                  size="sm"
                  variant={joinedGroups.includes(group.id) ? "outline" : "default"}
                  onClick={() => handleJoinGroup(group.id)}
                  className={joinedGroups.includes(group.id) 
                    ? "bg-red-600/20 border-red-600 text-red-300 hover:bg-red-600/30" 
                    : "bg-green-600 hover:bg-green-700"
                  }
                >
                  {joinedGroups.includes(group.id) ? (
                    <>‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶¶‡¶ø‡¶®</>
                  ) : (
                    <>
                      <UserPlus className="mr-1 h-3 w-3" />
                      ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶®
                    </>
                  )}
                </Button>
                
                {joinedGroups.includes(group.id) && (
                  <Button
                    size="sm"
                    onClick={() => handleJoinMeeting(group)}
                    className="bg-blue-600 hover:bg-blue-700 text-xs"
                  >
                    <Video className="mr-1 h-3 w-3" />
                    ‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç
                  </Button>
                )}
              </div>
            </div>

            <div className="flex flex-wrap gap-2 mb-3">
              <Badge variant="outline" className="text-blue-300 border-blue-600/30 text-xs">
                {group.class}
              </Badge>
              <Badge variant="outline" className="text-green-300 border-green-600/30 text-xs">
                {group.subject}
              </Badge>
            </div>

            <div className="flex items-center justify-between text-xs text-gray-400">
              <div className="flex items-center space-x-4">
                <span className="flex items-center">
                  <Users className="h-3 w-3 mr-1" />
                  {group.members}/{group.maxMembers}
                </span>
                <span className="flex items-center">
                  <Clock className="h-3 w-3 mr-1" />
                  {group.nextSession}
                </span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="flex items-center">
                  <MessageCircle className="h-3 w-3 mr-1" />
                  ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü
                </span>
                <span className="flex items-center">
                  <Calendar className="h-3 w-3 mr-1" />
                  ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡ßÄ
                </span>
              </div>
            </div>
          </div>
        ))}
      </CardContent>
    </Card>
  );
};

export default StudyGroups;
