
import { realtimeService } from './realtimeService';

export type NotificationType = 'like' | 'comment' | 'download' | 'achievement' | 'system' | 'payment';

export interface NotificationData {
  title: string;
  message: string;
  type: NotificationType;
  userId: string;
  data?: any;
}

class NotificationService {
  private permission: NotificationPermission = 'default';

  constructor() {
    this.requestPermission();
  }

  async requestPermission(): Promise<NotificationPermission> {
    if ('Notification' in window) {
      this.permission = await Notification.requestPermission();
    }
    return this.permission;
  }

  async sendNotification(notificationData: NotificationData): Promise<void> {
    try {
      // Store in database
      await realtimeService.createNotification({
        title: notificationData.title,
        message: notificationData.message,
        type: notificationData.type,
        userId: notificationData.userId,
        read: false,
        data: notificationData.data
      });

      // Show browser notification if permission granted
      if (this.permission === 'granted') {
        new Notification(notificationData.title, {
          body: notificationData.message,
          icon: '/favicon.ico',
          badge: '/favicon.ico',
          tag: notificationData.type,
          requireInteraction: false,
          silent: false
        });
      }

      // Send push notification (if service worker is registered)
      await this.sendPushNotification(notificationData);
    } catch (error) {
      console.error('Error sending notification:', error);
    }
  }

  private async sendPushNotification(notificationData: NotificationData): Promise<void> {
    if ('serviceWorker' in navigator && 'PushManager' in window) {
      try {
        const registration = await navigator.serviceWorker.ready;
        if (registration.pushManager) {
          // This would require FCM setup
          console.log('Push notification service available');
        }
      } catch (error) {
        console.error('Push notification error:', error);
      }
    }
  }

  // Predefined notification templates
  async notifyLike(likerName: string, contentTitle: string, contentOwnerId: string): Promise<void> {
    await this.sendNotification({
      title: '‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶æ‡¶á‡¶ï! üëç',
      message: `${likerName} ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ "${contentTitle}" ‡¶ï‡ßá ‡¶≤‡¶æ‡¶á‡¶ï ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®`,
      type: 'like',
      userId: contentOwnerId,
      data: { likerName, contentTitle }
    });
  }

  async notifyComment(commenterName: string, contentTitle: string, contentOwnerId: string): Promise<void> {
    await this.sendNotification({
      title: '‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø! üí¨',
      message: `${commenterName} ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ "${contentTitle}" ‡¶è ‡¶Æ‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®`,
      type: 'comment',
      userId: contentOwnerId,
      data: { commenterName, contentTitle }
    });
  }

  async notifyDownload(downloaderName: string, contentTitle: string, contentOwnerId: string): Promise<void> {
    await this.sendNotification({
      title: '‡¶®‡¶§‡ßÅ‡¶® ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°! üì•',
      message: `${downloaderName} ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ "${contentTitle}" ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®`,
      type: 'download',
      userId: contentOwnerId,
      data: { downloaderName, contentTitle }
    });
  }

  async notifyAchievement(userId: string, achievement: string): Promise<void> {
    await this.sendNotification({
      title: '‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! üéâ',
      message: `‡¶Ü‡¶™‡¶®‡¶ø "${achievement}" ‡¶Ö‡¶∞‡ßç‡¶ú‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®!`,
      type: 'achievement',
      userId,
      data: { achievement }
    });
  }

  async notifyPaymentSuccess(userId: string, planName: string): Promise<void> {
    await this.sendNotification({
      title: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤! ‚úÖ',
      message: `‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ${planName} ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`,
      type: 'payment',
      userId,
      data: { planName }
    });
  }

  async notifySystemMessage(userId: string, message: string): Promise<void> {
    await this.sendNotification({
      title: '‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ üì¢',
      message,
      type: 'system',
      userId,
      data: {}
    });
  }
}

export const notificationService = new NotificationService();
