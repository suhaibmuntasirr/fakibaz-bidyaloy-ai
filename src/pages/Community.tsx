
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { MessageCircle, Heart, Share2, Users, Plus, Search, Clock, HelpCircle, Lightbulb, Target } from 'lucide-react';
import Navbar from '@/components/Navbar';
import TrendingTopics from '@/components/TrendingTopics';
import CommunityStats from '@/components/CommunityStats';
import StudyGroups from '@/components/StudyGroups';
import { useToast } from '@/hooks/use-toast';

interface Post {
  id: string;
  author: {
    name: string;
    avatar?: string;
    class: string;
    school: string;
  };
  content: string;
  timestamp: Date;
  likes: number;
  comments: number;
  tags: string[];
  type: 'question' | 'discussion' | 'study-tip' | 'achievement';
}

const Community = () => {
  const [posts, setPosts] = useState<Post[]>([]);
  const [newPost, setNewPost] = useState('');
  const [selectedTags, setSelectedTags] = useState<string[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const { toast } = useToast();

  const postTags = ['‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®', '‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ', '‡¶∏‡ßç‡¶ü‡¶æ‡¶°‡¶ø ‡¶ü‡¶ø‡¶™‡¶∏', '‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ', '‡¶ó‡¶£‡¶ø‡¶§', '‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®', '‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø', '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ'];

  useEffect(() => {
    // Mock data - replace with actual API calls
    setPosts([
      {
        id: '1',
        author: {
          name: '‡¶∏‡¶æ‡¶ï‡¶ø‡¶¨ ‡¶Ü‡¶π‡¶Æ‡ßá‡¶¶',
          class: 'Class 10',
          school: '‡¶¢‡¶æ‡¶ï‡¶æ ‡¶ï‡¶≤‡ßá‡¶ú‡¶ø‡¶Ø‡¶º‡ßá‡¶ü ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤'
        },
        content: '‡¶ï‡ßá‡¶â ‡¶ï‡¶ø ‡¶ó‡¶£‡¶ø‡¶§‡ßá‡¶∞ ‡¶¶‡ßç‡¶¨‡¶ø‡¶ò‡¶æ‡¶§ ‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£‡ßá‡¶∞ ‡¶∏‡¶π‡¶ú ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø ‡¶ú‡¶æ‡¶®‡ßá‡¶®? ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶Ø‡¶º ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶ï‡¶Æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶¨?',
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),
        likes: 12,
        comments: 8,
        tags: ['‡¶ó‡¶£‡¶ø‡¶§', '‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®'],
        type: 'question'
      },
      {
        id: '2',
        author: {
          name: '‡¶´‡¶æ‡¶§‡¶ø‡¶Æ‡¶æ ‡¶ñ‡¶æ‡¶®',
          class: 'Class 12',
          school: '‡¶≠‡¶ø‡¶ï‡¶æ‡¶∞‡ßÅ‡¶®‡¶®‡¶ø‡¶∏‡¶æ ‡¶®‡ßÇ‡¶® ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤'
        },
        content: 'HSC ‡¶™‡¶¶‡¶æ‡¶∞‡ßç‡¶•‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¶‡¶æ‡¶∞‡ßÅ‡¶£ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡¶æ‡¶°‡¶ø ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ‡¶¨‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡•§ ‡ß© ‡¶Æ‡¶æ‡¶∏‡ßá ‡¶∏‡¶ø‡¶≤‡ßá‡¶¨‡¶æ‡¶∏ ‡¶∂‡ßá‡¶∑ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ó‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶®‡ßç‡¶ü‡¶ø! ‡¶ï‡ßá ‡¶ï‡ßá ‡¶Ü‡¶ó‡ßç‡¶∞‡¶π‡ßÄ?',
        timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000),
        likes: 25,
        comments: 15,
        tags: ['‡¶∏‡ßç‡¶ü‡¶æ‡¶°‡¶ø ‡¶ü‡¶ø‡¶™‡¶∏', '‡¶™‡¶¶‡¶æ‡¶∞‡ßç‡¶•‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®'],
        type: 'study-tip'
      },
      {
        id: '3',
        author: {
          name: '‡¶∞‡¶æ‡¶∂‡ßá‡¶¶ ‡¶π‡¶æ‡¶∏‡¶æ‡¶®',
          class: 'Class 9',
          school: '‡¶®‡¶ü‡¶∞‡¶°‡ßá‡¶Æ ‡¶ï‡¶≤‡ßá‡¶ú'
        },
        content: '‡¶Ü‡¶ú ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶Ø‡¶º A+ ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡¶ø! ‡¶è‡¶á ‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ü‡¶ø‡¶∞ ‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ üéâ',
        timestamp: new Date(Date.now() - 8 * 60 * 60 * 1000),
        likes: 45,
        comments: 22,
        tags: ['‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ'],
        type: 'achievement'
      }
    ]);
  }, []);

  const handleCreatePost = () => {
    if (!newPost.trim()) {
      toast({
        title: "‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®",
        description: "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®",
        variant: "destructive"
      });
      return;
    }

    const post: Post = {
      id: Date.now().toString(),
      author: {
        name: '‡¶Ü‡¶™‡¶®‡¶ø',
        class: 'Class 10',
        school: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤'
      },
      content: newPost,
      timestamp: new Date(),
      likes: 0,
      comments: 0,
      tags: selectedTags,
      type: 'discussion'
    };

    setPosts([post, ...posts]);
    setNewPost('');
    setSelectedTags([]);
    toast({
      title: "‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      description: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
    });
  };

  const handleLikePost = (postId: string) => {
    setPosts(prevPosts =>
      prevPosts.map(post =>
        post.id === postId
          ? { ...post, likes: post.likes + 1 }
          : post
      )
    );
  };

  const getPostIcon = (type: Post['type']) => {
    switch (type) {
      case 'question':
        return <HelpCircle className="h-5 w-5 text-blue-400" />;
      case 'study-tip':
        return <Lightbulb className="h-5 w-5 text-yellow-400" />;
      case 'achievement':
        return <Target className="h-5 w-5 text-green-400" />;
      default:
        return <MessageCircle className="h-5 w-5 text-purple-400" />;
    }
  };

  return (
    <div className="min-h-screen bg-[#28282B]">
      <Navbar />
      
      <div className="container mx-auto px-4 py-8">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-4">
            ‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßÄ ‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ü‡¶ø
          </h1>
          <p className="text-gray-300 text-lg">
            ‡¶∏‡¶æ‡¶∞‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡ßã‡¶® - ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶∂‡¶ø‡¶ñ‡ßÅ‡¶®
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-3 space-y-6">
            <Tabs defaultValue="posts" className="w-full">
              <TabsList className="grid w-full grid-cols-2 bg-black/30 backdrop-blur-lg border border-white/10">
                <TabsTrigger value="posts" className="data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-600 data-[state=active]:to-purple-600">
                  <MessageCircle className="mr-2 h-4 w-4" />
                  ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶ì ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ
                </TabsTrigger>
                <TabsTrigger value="groups" className="data-[state=active]:bg-gradient-to-r data-[state=active]:from-green-600 data-[state=active]:to-teal-600">
                  <Users className="mr-2 h-4 w-4" />
                  ‡¶∏‡ßç‡¶ü‡¶æ‡¶°‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™
                </TabsTrigger>
              </TabsList>

              <TabsContent value="posts" className="space-y-6">
                {/* Create Post */}
                <Card className="bg-black/20 backdrop-blur-lg border border-white/10">
                  <CardHeader>
                    <CardTitle className="text-white flex items-center">
                      <Plus className="mr-2 h-5 w-5" />
                      ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <Textarea
                      placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®, ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§ ‡¶¨‡¶æ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®..."
                      value={newPost}
                      onChange={(e) => setNewPost(e.target.value)}
                      className="bg-black/30 border-white/20 text-white placeholder:text-gray-400 min-h-[100px]"
                    />
                    
                    <div className="space-y-2">
                      <p className="text-sm text-gray-300">‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®:</p>
                      <div className="flex flex-wrap gap-2">
                        {postTags.map((tag) => (
                          <Button
                            key={tag}
                            variant={selectedTags.includes(tag) ? 'default' : 'outline'}
                            size="sm"
                            onClick={() => {
                              setSelectedTags(prev =>
                                prev.includes(tag)
                                  ? prev.filter(t => t !== tag)
                                  : [...prev, tag]
                              );
                            }}
                            className="bg-black/30 border-white/20 text-white hover:bg-white/10"
                          >
                            {tag}
                          </Button>
                        ))}
                      </div>
                    </div>

                    <Button
                      onClick={handleCreatePost}
                      className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                    >
                      ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®
                    </Button>
                  </CardContent>
                </Card>

                {/* Posts List */}
                <div className="space-y-4">
                  {posts.map((post) => (
                    <Card key={post.id} className="bg-black/20 backdrop-blur-lg border border-white/10 hover:border-white/20 transition-all duration-300">
                      <CardContent className="p-6">
                        <div className="flex items-start space-x-4">
                          <Avatar className="h-12 w-12">
                            <AvatarImage src={post.author.avatar} />
                            <AvatarFallback className="bg-gradient-to-br from-blue-600 to-purple-600 text-white">
                              {post.author.name.charAt(0)}
                            </AvatarFallback>
                          </Avatar>
                          
                          <div className="flex-1 space-y-3">
                            <div className="flex items-center justify-between">
                              <div>
                                <h4 className="text-white font-semibold">{post.author.name}</h4>
                                <p className="text-gray-400 text-sm">
                                  {post.author.class} ‚Ä¢ {post.author.school}
                                </p>
                              </div>
                              <div className="flex items-center text-gray-400 text-sm">
                                {getPostIcon(post.type)}
                                <Clock className="h-3 w-3 ml-2 mr-1" />
                                {Math.floor((Date.now() - post.timestamp.getTime()) / (1000 * 60 * 60))}h ago
                              </div>
                            </div>

                            <p className="text-gray-200 leading-relaxed">{post.content}</p>

                            <div className="flex flex-wrap gap-2">
                              {post.tags.map((tag, index) => (
                                <Badge key={index} variant="outline" className="text-gray-300 border-gray-600 text-xs">
                                  {tag}
                                </Badge>
                              ))}
                            </div>

                            <div className="flex items-center justify-between pt-3 border-t border-white/10">
                              <div className="flex items-center space-x-6">
                                <button
                                  onClick={() => handleLikePost(post.id)}
                                  className="flex items-center space-x-1 text-gray-400 hover:text-red-400 transition-colors"
                                >
                                  <Heart className="h-4 w-4" />
                                  <span>{post.likes}</span>
                                </button>
                                <button className="flex items-center space-x-1 text-gray-400 hover:text-blue-400 transition-colors">
                                  <MessageCircle className="h-4 w-4" />
                                  <span>{post.comments}</span>
                                </button>
                                <button className="flex items-center space-x-1 text-gray-400 hover:text-green-400 transition-colors">
                                  <Share2 className="h-4 w-4" />
                                  <span>‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞</span>
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </TabsContent>

              <TabsContent value="groups" className="space-y-6">
                {/* Search Groups */}
                <Card className="bg-black/20 backdrop-blur-lg border border-white/10">
                  <CardContent className="p-4">
                    <div className="relative">
                      <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                      <Input
                        placeholder="‡¶∏‡ßç‡¶ü‡¶æ‡¶°‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®..."
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        className="pl-10 bg-black/30 border-white/20 text-white placeholder:text-gray-400"
                      />
                    </div>
                  </CardContent>
                </Card>

                {/* Study Groups Component */}
                <StudyGroups />
              </TabsContent>
            </Tabs>
          </div>

          {/* Right Sidebar */}
          <div className="space-y-6">
            <CommunityStats />
            <TrendingTopics />
          </div>
        </div>
      </div>
    </div>
  );
};

export default Community;
