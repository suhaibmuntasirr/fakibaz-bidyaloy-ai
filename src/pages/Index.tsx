import React, { useState } from 'react';
import { Send, BookOpen, Users, Search, Upload, MessageCircle, Star, GraduationCap, Target, Bot, User } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import Navbar from '@/components/Navbar';
import AdBanner from '@/components/AdBanner';
import { useNavigate } from 'react-router-dom';
import { useAuthAction } from '@/hooks/useAuthAction';
import { useToast } from '@/hooks/use-toast';
import { chatGPTService } from '@/services/chatgptService';

interface Message {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  references?: string[];
}

const Index = () => {
  const [selectedClass, setSelectedClass] = useState('');
  const [selectedSubject, setSelectedSubject] = useState('');
  const [query, setQuery] = useState('');
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showChat, setShowChat] = useState(false);
  const navigate = useNavigate();
  const { requireAuth } = useAuthAction();
  const { toast } = useToast();

  const classes = [
    'Class 1', 'Class 2', 'Class 3', 'Class 4', 'Class 5', 'Class 6',
    'Class 7', 'Class 8', 'Class 9', 'Class 10', 'Class 11', 'Class 12'
  ];

  const subjects = [
    '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', 'English', '‡¶ó‡¶£‡¶ø‡¶§', '‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®', '‡¶∏‡¶æ‡¶Æ‡¶æ‡¶ú‡¶ø‡¶ï ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®', 
    'ICT', '‡¶™‡¶¶‡¶æ‡¶∞‡ßç‡¶•‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®', '‡¶∞‡¶∏‡¶æ‡¶Ø‡¶º‡¶®', '‡¶ú‡ßÄ‡¶¨‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®', '‡¶â‡¶ö‡ßç‡¶ö‡¶§‡¶∞ ‡¶ó‡¶£‡¶ø‡¶§'
  ];

  const gradeCategories = [
    { range: '‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡ßß-‡ß´', icon: 'üé®', description: '‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ', classes: ['Class 1', 'Class 2', 'Class 3', 'Class 4', 'Class 5'] },
    { range: '‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡ß¨-‡ßÆ', icon: 'üìö', description: '‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø', classes: ['Class 6', 'Class 7', 'Class 8'] },
    { range: '‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡ßØ-‡ßß‡ß¶', icon: 'üéØ', description: 'SSC ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø', classes: ['Class 9', 'Class 10'] },
    { range: '‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡ßß‡ßß-‡ßß‡ß®', icon: 'üèÜ', description: 'HSC ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø', classes: ['Class 11', 'Class 12'] }
  ];

  React.useEffect(() => {
    const savedApiKey = localStorage.getItem('openai_api_key');
    if (savedApiKey) {
      setApiKey(savedApiKey);
      chatGPTService.setApiKey(savedApiKey);
      setShowApiKeyInput(false);
    }
  }, []);

  const handleSetApiKey = () => {
    if (!apiKey.trim()) {
      toast({
        title: "API Key ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®",
        description: "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá OpenAI API Key ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
        variant: "destructive"
      });
      return;
    }
    
    chatGPTService.setApiKey(apiKey);
    setShowApiKeyInput(false);
    localStorage.setItem('openai_api_key', apiKey);
    
    toast({
      title: "API Key ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      description: "‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø AI ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®!"
    });
  };

  const handleAskQuestion = async () => {
    if (!query.trim()) {
      toast({
        title: "‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®",
        description: "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®",
        variant: "destructive"
      });
      return;
    }

    requireAuth(async () => {
      const userMessage: Message = {
        id: Date.now().toString(),
        type: 'user',
        content: query,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, userMessage]);
      setShowChat(true);
      setIsLoading(true);

      try {
        // Use a predefined API key or get from environment
        const apiKey = 'your-api-key-here'; // This should come from your backend
        chatGPTService.setApiKey(apiKey);
        
        const response = await chatGPTService.sendMessage(query, {
          class: selectedClass,
          subject: selectedSubject
        });

        const aiResponse: Message = {
          id: (Date.now() + 1).toString(),
          type: 'ai',
          content: response,
          timestamp: new Date(),
          references: selectedClass && selectedSubject ? [`${selectedClass} - ${selectedSubject}`] : []
        };
        
        setMessages(prev => [...prev, aiResponse]);
      } catch (error) {
        toast({
          title: "‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø",
          description: error instanceof Error ? error.message : "‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
          variant: "destructive"
        });
      } finally {
        setIsLoading(false);
      }

      setQuery('');
    });
  };

  const handleNavigateToNotes = () => {
    navigate('/notes');
  };

  const handleNavigateToUpload = () => {
    requireAuth(() => {
      navigate('/notes');
      setTimeout(() => {
        const uploadTab = document.querySelector('[data-value="upload"]') as HTMLElement;
        uploadTab?.click();
      }, 100);
    });
  };

  const handleSearch = () => {
    requireAuth(() => {
      const searchParams = new URLSearchParams();
      if (query) searchParams.set('q', query);
      if (selectedClass) searchParams.set('class', selectedClass);
      if (selectedSubject) searchParams.set('subject', selectedSubject);
      
      navigate(`/notes?${searchParams.toString()}`);
    });
  };

  const handleNavigateToCommunity = () => {
    requireAuth(() => {
      navigate('/community');
    });
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleAskQuestion();
    }
  };

  const handleGradeClick = (gradeCategory: typeof gradeCategories[0]) => {
    requireAuth(() => {
      navigate(`/notes?class=${gradeCategory.classes[0]}`);
    });
  };

  return (
    <div className="min-h-screen bg-[#28282B]">
      <Navbar />
      
      {/* Ad Banner */}
      <AdBanner 
        imageUrl="/lovable-uploads/e283b105-0747-4859-9cef-ef35fb06dd9d.png"
        altText="‡¶´‡ßç‡¶∞‡¶ø‡¶ï‡ßã‡¶∞‡ßç‡¶∏ - After SSC English Course"
        onClick={() => window.open('https://example.com/ad-link', '_blank')}
      />
      
      {/* Hero Section */}
      <div className="container mx-auto px-4 pt-8 pb-12">
        <div className="text-center mb-12">
          <div className="flex items-center justify-center mb-6">
            <h1 className="text-7xl font-bold text-white">
              ‡¶´‡¶æ‡¶ï‡¶ø‡¶¨‡¶æ‡¶ú
            </h1>
          </div>
          <p className="text-2xl text-gray-200 mb-8">
            ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ <span className="text-blue-400 font-semibold">AI-‡¶ö‡¶æ‡¶≤‡¶ø‡¶§</span> ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ
          </p>
          <p className="text-lg text-gray-300">
            NCTB ‡¶™‡¶æ‡¶†‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶ì P2P ‡¶®‡ßã‡¶ü ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø‡¶Ç ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ
          </p>
        </div>

        {/* Grade Selection and P2P Explanation Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-16">
          {/* Left Side - Grade Selection */}
          <Card className="bg-black/40 backdrop-blur-xl border-white/20">
            <CardHeader className="text-center pb-6">
              <div className="flex items-center justify-center mb-4">
                <GraduationCap className="h-10 w-10 text-blue-400 mr-3" />
                <CardTitle className="text-white text-3xl">‡¶Ø‡ßá ‡¶ï‡ßã‡¶® ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶®‡ßã‡¶ü ‡¶™‡¶æ‡¶ì ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶á</CardTitle>
              </div>
              <p className="text-gray-200 text-lg">‡¶∏‡¶¨ ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶®‡ßã‡¶ü ‡¶ö‡¶≤‡¶õ‡ßá!</p>
            </CardHeader>
            <CardContent className="space-y-4">
              {gradeCategories.map((category, index) => (
                <div
                  key={index}
                  onClick={() => handleGradeClick(category)}
                  className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20 hover:bg-white/20 transition-all duration-300 cursor-pointer group"
                >
                  <div className="flex items-center space-x-4">
                    <div className="text-4xl">{category.icon}</div>
                    <div className="flex-1">
                      <h3 className="text-white text-xl font-semibold mb-1">{category.range}</h3>
                      <p className="text-gray-300">{category.description}</p>
                    </div>
                    <div className="text-blue-400 group-hover:text-blue-300 transition-colors">
                      <BookOpen className="h-6 w-6" />
                    </div>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Right Side - P2P System Explanation */}
          <Card className="bg-black/40 backdrop-blur-xl border-white/20">
            <CardHeader className="text-center pb-6">
              <div className="flex items-center justify-center mb-4">
                <Target className="h-10 w-10 text-purple-400 mr-3" />
                <CardTitle className="text-white text-3xl">P2P ‡¶®‡ßã‡¶ü ‡¶ì ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ</CardTitle>
              </div>
              <p className="text-gray-200 text-lg">‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø ‡¶®‡¶ø‡¶®, ‡¶Ö‡¶®‡ßç‡¶Ø‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßÅ‡¶®</p>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <div className="bg-white/10 backdrop-blur-lg rounded-xl p-4 border border-white/20">
                  <div className="flex items-center space-x-3 mb-2">
                    <div className="bg-blue-500/30 rounded-full p-2">
                      <BookOpen className="h-5 w-5 text-blue-300" />
                    </div>
                    <h4 className="text-white font-semibold">‡¶®‡ßã‡¶ü ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®</h4>
                  </div>
                  <p className="text-gray-300 text-sm">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶®‡ßã‡¶ü ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßÅ‡¶®</p>
                </div>

                <div className="bg-white/10 backdrop-blur-lg rounded-xl p-4 border border-white/20">
                  <div className="flex items-center space-x-3 mb-2">
                    <div className="bg-green-500/30 rounded-full p-2">
                      <Users className="h-5 w-5 text-green-300" />
                    </div>
                    <h4 className="text-white font-semibold">‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ü‡¶ø ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü</h4>
                  </div>
                  <p className="text-gray-300 text-sm">‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶™‡¶°‡¶º‡¶æ‡¶∂‡ßã‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶è‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶®</p>
                </div>

                <div className="bg-white/10 backdrop-blur-lg rounded-xl p-4 border border-white/20">
                  <div className="flex items-center space-x-3 mb-2">
                    <div className="bg-purple-500/30 rounded-full p-2">
                      <Star className="h-5 w-5 text-purple-300" />
                    </div>
                    <h4 className="text-white font-semibold">‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶Ö‡¶∞‡ßç‡¶ú‡¶®</h4>
                  </div>
                  <p className="text-gray-300 text-sm">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶®‡ßç‡¶Ø‡¶¶‡ßá‡¶∞ ‡¶∏‡ßç‡¶¨‡¶™‡ßç‡¶® ‡¶™‡ßÇ‡¶∞‡¶£‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßÅ‡¶®</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main AI Question Card */}
        <div className="max-w-5xl mx-auto mb-16">
          <Card className="bg-gradient-to-br from-black via-gray-900 to-purple-900/30 backdrop-blur-xl border-white/30 shadow-2xl">
            <CardHeader className="text-center pb-6">
              <CardTitle className="text-5xl font-bold text-white mb-4 flex items-center justify-center">
                <MessageCircle className="mr-4 h-12 w-12 text-blue-400" />
                ‡¶ï‡ßÄ ‡¶∂‡¶ø‡¶ñ‡¶§‡ßá ‡¶ö‡¶æ‡¶ì?
              </CardTitle>
              <p className="text-xl text-gray-200">
                ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßã ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø‡¶§‡ßá
              </p>
            </CardHeader>
            <CardContent className="space-y-8 p-8">
              {/* Class and Subject Selection */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Select value={selectedClass} onValueChange={setSelectedClass}>
                  <SelectTrigger className="bg-white/10 border-white/30 text-white h-14 text-lg">
                    <SelectValue placeholder="üéì ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                  </SelectTrigger>
                  <SelectContent className="bg-[#28282B] border-white/20">
                    {classes.map((cls) => (
                      <SelectItem key={cls} value={cls} className="text-white hover:bg-white/10">
                        {cls}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>

                <Select value={selectedSubject} onValueChange={setSelectedSubject}>
                  <SelectTrigger className="bg-white/10 border-white/30 text-white h-14 text-lg">
                    <SelectValue placeholder="üìö ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                  </SelectTrigger>
                  <SelectContent className="bg-[#28282B] border-white/20">
                    {subjects.map((subject) => (
                      <SelectItem key={subject} value={subject} className="text-white hover:bg-white/10">
                        {subject}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Query Input */}
              <div className="relative">
                <Input
                  value={query}
                  onChange={(e) => setQuery(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="‚ú® ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡ßá‡¶ñ‡ßã..."
                  className="bg-white/10 border-white/30 text-white placeholder:text-gray-300 h-20 text-xl pr-20"
                />
                <Button 
                  className="absolute right-3 top-3 h-14 w-14 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                  size="icon"
                  onClick={handleAskQuestion}
                >
                  <Send className="h-6 w-6" />
                </Button>
              </div>

              {/* Chat Messages */}
              {showChat && (
                <div className="h-96 overflow-y-auto bg-black/20 rounded-xl p-4 border border-white/10">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex mb-4 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div
                        className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${
                          message.type === 'user'
                            ? 'bg-blue-600 text-white'
                            : 'bg-white/20 text-white border border-white/20'
                        }`}
                      >
                        <div className="flex items-start space-x-2">
                          {message.type === 'ai' && <Bot className="h-4 w-4 mt-1 text-blue-400" />}
                          {message.type === 'user' && <User className="h-4 w-4 mt-1" />}
                          <div className="flex-1">
                            <p className="text-sm leading-relaxed">{message.content}</p>
                            {message.references && message.references.length > 0 && (
                              <div className="mt-2 space-y-1">
                                {message.references.map((ref, index) => (
                                  <div key={index} className="flex items-center text-xs text-blue-300">
                                    <BookOpen className="h-3 w-3 mr-1" />
                                    {ref}
                                  </div>
                                ))}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  {isLoading && (
                    <div className="flex justify-start mb-4">
                      <div className="bg-white/20 text-white border border-white/20 max-w-xs lg:max-w-md px-4 py-3 rounded-2xl">
                        <div className="flex items-center space-x-2">
                          <Bot className="h-4 w-4 text-blue-400" />
                          <div className="flex space-x-1">
                            <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
                            <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                            <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Quick Action Buttons */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <Button 
                  variant="outline" 
                  className="bg-white/10 border-white/30 text-white hover:bg-white/20 h-16"
                  onClick={handleNavigateToNotes}
                >
                  <BookOpen className="mr-2 h-5 w-5" />
                  ‡¶®‡ßã‡¶ü ‡¶¶‡ßá‡¶ñ‡ßã
                </Button>
                <Button 
                  variant="outline" 
                  className="bg-white/10 border-white/30 text-white hover:bg-white/20 h-16"
                  onClick={handleNavigateToUpload}
                >
                  <Upload className="mr-2 h-5 w-5" />
                  ‡¶®‡ßã‡¶ü ‡¶Ü‡¶™‡¶≤‡ßã‡¶°
                </Button>
                <Button 
                  variant="outline" 
                  className="bg-white/10 border-white/30 text-white hover:bg-white/20 h-16"
                  onClick={handleSearch}
                >
                  <Search className="mr-2 h-5 w-5" />
                  ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¶‡ßá‡¶ñ‡ßã
                </Button>
                <Button 
                  variant="outline" 
                  className="bg-white/10 border-white/30 text-white hover:bg-white/20 h-16"
                  onClick={handleNavigateToCommunity}
                >
                  <Users className="mr-2 h-5 w-5" />
                  ‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ü‡¶ø
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Mobile App Download Section */}
        <div className="max-w-3xl mx-auto mb-16">
          <Card className="bg-gradient-to-br from-black via-gray-900 to-blue-900/30 backdrop-blur-xl border-white/30">
            <CardContent className="pt-8 text-center">
              <h3 className="text-2xl font-bold text-white mb-4">
                ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
              </h3>
              <p className="text-gray-300 text-lg mb-6">
                ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶Ø‡¶º, ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶ú‡¶æ‡¶Ø‡¶º‡¶ó‡¶æ‡¶Ø‡¶º ‡¶∂‡¶ø‡¶ñ‡ßÅ‡¶®
              </p>
              <Button 
                className="bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white px-8 py-3"
                onClick={() => window.open('https://play.google.com/store/apps', '_blank')}
              >
                ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Feature Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mt-20">
          <Card className="bg-black/40 backdrop-blur-xl border-white/20 hover:border-blue-300/50 transition-all duration-500 cursor-pointer group" onClick={() => requireAuth(() => console.log('AI feature clicked'))}>
            <CardHeader className="text-center">
              <div className="mx-auto mb-4 p-4 bg-blue-500/20 rounded-full w-fit group-hover:scale-110 transition-transform duration-300">
                <MessageCircle className="h-12 w-12 text-blue-400" />
              </div>
              <CardTitle className="text-white text-2xl">AI ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï</CardTitle>
            </CardHeader>
            <CardContent className="text-center">
              <p className="text-gray-200 text-lg leading-relaxed">
                ‡ß®‡ß™/‡ß≠ AI ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶Ø‡ßá NCTB ‡¶¨‡¶á ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶¨‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º
              </p>
            </CardContent>
          </Card>

          <Card className="bg-black/40 backdrop-blur-xl border-white/20 hover:border-green-300/50 transition-all duration-500 cursor-pointer group" onClick={handleNavigateToNotes}>
            <CardHeader className="text-center">
              <div className="mx-auto mb-4 p-4 bg-green-500/20 rounded-full w-fit group-hover:scale-110 transition-transform duration-300">
                <BookOpen className="h-12 w-12 text-green-400" />
              </div>
              <CardTitle className="text-white text-2xl">‡¶®‡ßã‡¶ü ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø‡¶Ç</CardTitle>
            </CardHeader>
            <CardContent className="text-center">
              <p className="text-gray-200 text-lg leading-relaxed">
                ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶®‡ßã‡¶ü ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶∂‡ßá‡¶ñ‡ßã
              </p>
            </CardContent>
          </Card>

          <Card className="bg-black/40 backdrop-blur-xl border-white/20 hover:border-purple-300/50 transition-all duration-500 cursor-pointer group" onClick={handleNavigateToCommunity}>
            <CardHeader className="text-center">
              <div className="mx-auto mb-4 p-4 bg-purple-500/20 rounded-full w-fit group-hover:scale-110 transition-transform duration-300">
                <Users className="h-12 w-12 text-purple-400" />
              </div>
              <CardTitle className="text-white text-2xl">‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ü‡¶ø</CardTitle>
            </CardHeader>
            <CardContent className="text-center">
              <p className="text-gray-200 text-lg leading-relaxed">
                ‡¶∏‡¶æ‡¶∞‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡¶ì ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡¶°‡¶º‡¶æ‡¶∂‡ßã‡¶®‡¶æ ‡¶ï‡¶∞‡ßã
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Stats Section */}
        <div className="mt-20 text-center">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto">
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
              <div className="text-4xl font-bold text-blue-400 mb-2">‡ßß‡ß¶‡ß¶‡ß¶+</div>
              <div className="text-gray-200">‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ</div>
            </div>
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
              <div className="text-4xl font-bold text-green-400 mb-2">‡ß´‡ß¶‡ß¶‡ß¶+</div>
              <div className="text-gray-200">‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞‡¶ï‡ßÉ‡¶§ ‡¶®‡ßã‡¶ü</div>
            </div>
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
              <div className="text-4xl font-bold text-purple-400 mb-2">‡ß®‡ß™/‡ß≠</div>
              <div className="text-gray-200">AI ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ</div>
            </div>
          </div>
        </div>
      </div>

      {/* Footer */}
      <footer className="bg-black/50 border-t border-white/10 py-4">
        <div className="container mx-auto px-4 text-center">
          <p className="text-gray-300 text-sm">
            2025 Copyright ¬© Fakibaz. All rights reserved.
          </p>
        </div>
      </footer>
    </div>
  );
};

export default Index;
